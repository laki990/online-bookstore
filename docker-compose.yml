
services:
  postgres:
    image: postgres:latest
    environment:
      POSTGRES_PASSWORD: pass
    ports:
      - "5432:5432"
    volumes:
      - ./docker:/docker-entrypoint-initdb.d
    networks:
      - app-network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "22181:2181"
    networks:
      - app-network
  broker:
    image: confluentinc/cp-kafka:latest
    container_name: broker
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - app-network

  service-registry:
    build:
      context: ./service-registry
      dockerfile: Dockerfile
    container_name: service-registry
    ports:
      - "8761:8761"
    networks:
      - app-network

  config-server:
    build:
      context: ./config-server
      dockerfile: Dockerfile
    container_name: config-server
    ports:
      - "8888:8888"
    networks:
      - app-network

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    depends_on:
      - catalog-service
    networks:
      - app-network
    ports:
      - "8080:8080"
    environment:
      - SERVER_PORT=8080
      - CATALOG_SERVICE_URI=http://catalog-service:8081

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    depends_on:
      - broker
    ports:
      - 8090:8080
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: broker:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - app-network

  catalog-service:
    build:
      context: ./catalog-service
      dockerfile: Dockerfile
    environment:
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_NAME=catalog_service
      - DATABASE_USER=catalog_user
      - DATABASE_PASSWORD=pass
    depends_on:
      - postgres
      - broker
      - service-registry
    ports:
      - "8081:8081"
    networks:
      - app-network

  inventory-service:
    build:
      context: ./inventory-service
      dockerfile: Dockerfile
    environment:
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_NAME=inventory_service
      - DATABASE_USER=inventory_user
      - DATABASE_PASSWORD=pass
    depends_on:
      - postgres
      - broker
    ports:
      - "8082:8082"
    networks:
      - app-network

  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    environment:
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_NAME=user_service
      - DATABASE_USER=laki
      - DATABASE_PASSWORD=pass
    depends_on:
      - postgres
      - broker
    ports:
      - "8083:8083"
    networks:
      - app-network

  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    environment:
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_NAME=order_service
      - DATABASE_USER=order_user
      - DATABASE_PASSWORD=pass
    depends_on:
      - postgres
      - broker
    ports:
      - "8084:8084"
    networks:
      - app-network
networks:
  app-network:
    driver: bridge